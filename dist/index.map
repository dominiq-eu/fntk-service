{"version":3,"sources":["data/app.js","utils/index.js","data/response.js","gateways/http/web-service.js","data/request.js","gateways/http/index.js","gateways/telegram/index.js","middleware/nlp.js","index.js"],"names":["App","fn","x","sources","layer","source","s","concat","add","l","do","f","start","dataPipeline","reduce","g","forEach","module","exports","randomBetween","min","max","Math","floor","random","list","length","index","Union","Result","require","Response","Success","Ok","Error","Err","Random","data_list","Express","Compression","BodyParser","Url","Http","Data","HttpHeader","method","String","url","path","headers","Object","HttpRequest","http","data","isObject","obj","toPromise","p","then","Promise","resolve","toString","response","JSON","stringify","isObjEmpty","Boolean","keys","app","use","json","urlencoded","extended","all","req","res","next","parse","console","log","request","pathname","query","body","handler","r","write","end","program","port","prog","createServer","listen","Type","RequestType","payload","NLPRequestType","v","is","sentence","Request","NLP","WebService","cfg","TeleBot","token","bot","polling","interval","on","msg","text","sendMessage","from","id","parseMode","replyToMessage","message_id","catch","e","Snowball","Natural","NlpToolkit","StopwordsIso","Fs","default","Language","de","en","State","lang","functions","trace","a","getSubDirs","dir","readdirSync","map","file","filter","statSync","isDirectory","ret","d","getNlpFunctions","sentences","push","replace","cleanStopwords","split","w","includes","join","trim","StemmSnowball","stemmer","cleanedText","toLowerCase","setCurrent","stem","getCurrent","Normalize","tokenizer","stemmed","calcSimilarity","withStr","matchStr","s1","s2","value","JaroWinklerDistance","getMatch","sort","val_a","s_a","val_b","s_b","val","txt","getPropability","match","undefined","getMatches","line","propability","b","reqRes","case","matchTable","global","include","__dirname","HTTPGateway","TelegramGateway","NLPMiddleware","Path","process","cwd","loadFunction","basePath","Router","Service"],"mappings":"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","file":"index.map","sourceRoot":"../src","sourcesContent":["/*\n    App.js\n\n    Provides a data structure for basic app behaivor.\n*/\n\n//\n// App\n//  * fn: The app logic\n//  * sources: A list of functions that act as data sources and generate data\n//  * layer: A list of functions that builds a pipeline and manipulate the\n//           data before reaching the app logic (fn)\n//\n// App :: Function -> List(Function) -> List(Function) -> Nothing\nconst App = (fn = x => x, sources = [], layer = []) => ({\n    // Here we register data sources. They can create data and feed in\n    // the system.\n    source: s => App(fn, sources.concat([s]), layer),\n\n    // Here we add a layer to manipulate the data on his way trough the\n    // system and before it reaches it's final processing.\n    // add: l => App(x => l(f(x))),\n    add: l => App(fn, sources, layer.concat([l])),\n\n    // Add the data processing\n    do: f => App(f, sources, layer),\n\n    // Start the app\n    start: () => {\n        // Build the data processing pipeline using composition.\n        const dataPipeline = layer\n            .concat(fn)\n            .reduce((f, g) => x => g(f(x)), x => x)\n\n        // Hand the data processing pipeline to the data sources,\n        // so that every source can pass new data to the app.\n        sources.forEach(s => s(dataPipeline))\n    }\n})\n\nmodule.exports = App\n","export const randomBetween = (min, max) =>\n  Math.floor(Math.random() * (max - min + 1)) + min;\n\nexport const random = (list = []) => {\n  if (list.length > 0) {\n    const index = randomBetween(0, list.length - 1);\n    return list[index];\n  } else {\n    return randomBetween(0, 100);\n  }\n};\n","/*\n    Request\n\n    Provides a data structure that represents an incoming request.\n*/\n\nconst { Union, Result } = require('@fntk/types')\nconst { random } = require('../utils')\n\nconst Response = Union('Response', {\n    Success: Result.Ok,\n    Error: Result.Err,\n    Random: data_list => Result.Ok(random(data_list))\n})\n\nmodule.exports = Response\n","// Express\nconst Express = require('express')\nconst Compression = require('compression')\nconst BodyParser = require('body-parser')\n\n// Node\nconst Url = require('url')\nconst Http = require('http')\n\nconst { Data } = require('@fntk/types')\n\n//\n// -- Types\n//\n\nconst HttpHeader = Data('HTTPHeader', {\n    method: String,\n    url: String,\n    path: String,\n    headers: Object\n})\n\nconst HttpRequest = Data('HTTPRequest', {\n    http: HttpHeader,\n    data: Object\n})\n\n//\n// -- Helper\n//\nconst isObject = obj => obj !== null && typeof obj === 'object'\nconst toPromise = p => (p.then ? p : Promise.resolve(p))\nconst toString = response =>\n    isObject(response) ? JSON.stringify(response, null, 4) : response\nconst isObjEmpty = obj => Boolean(Object.keys(obj).length)\n\n// app :: ()\nconst app = fn =>\n    Express()\n        .use(Compression()) // Compression support\n        .use(BodyParser.json()) // Automatic parsing of the response body\n        .use(BodyParser.urlencoded({ extended: true }))\n        // Catch route\n        .all('*', (req, res, next) => {\n            const url = Url.parse(req.url, true)\n            console.log('URL:', url)\n            const request = HttpRequest({\n                http: HttpHeader({\n                    method: req.method,\n                    headers: req.headers,\n                    url: req.url,\n                    path: url.pathname\n                }),\n                data: isObjEmpty(url.query) ? url.query : req.body\n            })\n            console.log('Request:', request)\n            const handler = r => toPromise(fn(r))\n            handler(request)\n                .then(toString)\n                .then(response => {\n                    console.log('[WebService] Response: ', response)\n                    res.write(response)\n                    res.end()\n                })\n        })\n\n// program :: { Int, [ Route ]}\nconst program = fn => {\n    // Configuration\n    const port = 8000\n    const prog = app(fn)\n\n    Http.createServer(prog).listen(port, () => {\n        console.log(`Listening on port: ${port}`)\n    })\n}\n\nmodule.exports = { program }\n","/*\n    Request\n\n    Provides a data structure that represents an incoming request.\n*/\n\nconst { Type, Data, Union, String, Object } = require('@fntk/types')\n\nconst RequestType = Data('Request', {\n    path: String,\n    payload: Object\n})\n\nconst NLPRequestType = Type(\n    'NLP',\n    v => Object.is(v) && v.sentence && String.is(v.sentence),\n    v => ({ sentence: String(v) })\n)\n\n// const NLPRequestType = Data('NLP', {\n//     sentence: String\n// })\n\nconst Request = Union('Request', {\n    Request: RequestType,\n    NLP: NLPRequestType\n})\n\nmodule.exports = Request\n","/*\n    HttpListener\n\n    Listen to http events and forward them back to the app for handling.\n*/\n\nconst WebService = require('./web-service')\nconst Request = require('../../data/request')\n\n// Get http requests, send them to the system for processing and\n// send the response after successfull handling.\nmodule.exports = cfg => fn =>\n    WebService.program(request => {\n        console.log('Http:', request)\n        const req = Request.Request({\n            path: request.http.path,\n            payload: request.data\n        })\n        console.log('Request:', req)\n        return fn(req)\n    })\n","/*\n    telegram.js\n\n    Get updates from telegram.\n*/\n\nconst Request = require('../../data/request')\nconst TeleBot = require('telebot')\n\nconst toPromise = p => (p.then ? p : Promise.resolve(p))\n\nmodule.exports = ({ token }) => fn => {\n    const bot = new TeleBot({\n        token,\n        polling: {\n            interval: 1000\n        }\n    })\n\n    bot.on('text', msg => {\n        console.log('[Gateway] [Telegram] Request: ', msg)\n        const req = Request.NLP(msg.text)\n\n        toPromise(fn(msg.text))\n            .then(response => {\n                console.log('[Gateway] [Telegram] Response: ', response)\n                bot.sendMessage(msg.from.id, response, {\n                    parseMode: 'html',\n                    replyToMessage: msg.message_id\n                })\n            })\n            .catch(e => {\n                console.log('[Gateway] [Telegram] Error:', e)\n                bot.sendMessage(msg.from.id, response, {\n                    replyToMessage: msg.message_id\n                })\n            })\n    })\n\n    bot.start()\n}\n","/*\n    Route sentences to modules using nlp technics.\n*/\n\n// const Franc = require('franc') // Language detection\n// const Tokenizer = require('./stem/tokenizer')\nconst Snowball = require('snowball')\nconst Natural = require('natural') // sentence similarity\nconst NlpToolkit = require('nlp-toolkit')\nconst StopwordsIso = require('stopwords-iso')\nconst Fs = require('fs')\n\nconst Request = require('../data/request').default\n\n// Languages :: Languages\nconst Language = {\n    de: 'German',\n    en: 'English'\n}\n\n// State :: State\nconst State = {\n    lang: 'de',\n    functions: []\n}\n\n//\n// -- Utils\n//\n\n// trace :: String => a => a\nconst trace = msg => a => {\n    console.log(msg, a)\n    return a\n}\n\n// getSubDirs :: String => String[]\nconst getSubDirs = dir =>\n    Fs.readdirSync(dir)\n        // Convert the filename to a full path, filter out all\n        // directories and look recursively for more nested dirs.\n        .map(file => `${dir}/${file}`)\n        .filter(file => Fs.statSync(file).isDirectory())\n        .reduce(\n            (ret, d) =>\n                ret\n                    // Add found dirs to return value and look for\n                    // more nested dirs.\n                    .concat(d)\n                    .concat(getSubDirs(d)),\n            []\n        )\n\n// getNlpFunctions :: String => NlpFunction[]\nconst getNlpFunctions = dir =>\n    getSubDirs(dir).reduce((ret, path) => {\n        try {\n            const cfg = require(`${path}/function.json`)\n            // const fn = require(`${path}/index.js`)\n            if (cfg.sentences.de || cfg.sentences.en) {\n                // ret.push({ fn, sentences: cfg.sentences })\n                ret.push({\n                    path: path.replace(dir, ''),\n                    sentences: cfg.sentences\n                })\n            }\n        } catch (e) {\n            // Not found, or something else..\n            // console.error('NLPFunction:', e)\n        }\n        return ret\n    }, [])\n\n// cleanStopwords :: String => Language => String\nconst cleanStopwords = (text, lang) =>\n    text\n        // split sentence to an array of words\n        .split(' ')\n        // Filter all stopwords\n        .filter(w => !StopwordsIso[lang].includes(w))\n        // create string again\n        .join(' ')\n        .trim()\n\n// StemmSnowball :: String -> String\nconst StemmSnowball = text => {\n    if (text.length > 5) {\n        const stemmer = new Snowball(Language[State.lang])\n        const cleanedText = cleanStopwords(\n            text.toLowerCase().trim(),\n            State.lang\n        )\n        stemmer.setCurrent(cleanedText)\n        stemmer.stem()\n        return stemmer.getCurrent()\n    } else {\n        return text.toLowerCase()\n    }\n}\n\n// Normalize :: String -> String\nconst Normalize = text => {\n    const token = NlpToolkit.tokenizer(text)\n    const stemmed = NlpToolkit.stemmer(token, { lang: State.lang })\n    return cleanStopwords(stemmed.join(' ').trim(), State.lang)\n}\n\n// Normalize :: (String => String) -> String -> String -> { val: Number, msg: String }\nconst calcSimilarity = (stemmer, withStr, matchStr) => {\n    const s1 = stemmer(matchStr.toLowerCase().trim())\n    const s2 = stemmer(withStr.toLowerCase().trim())\n    const value = Natural.JaroWinklerDistance(s1, s2)\n\n    return [value, s1]\n}\n\nconst getMatch = (stemmer, text, sentences) =>\n    sentences\n        .map(s => calcSimilarity(stemmer, text, s))\n        .sort(([val_a, s_a], [val_b, s_b]) => val_b - val_a)\n        // .map(trace('#'))\n        .filter(([val, sentence]) => val >= 0.75)\n        .map(([value, txt]) => ({\n            value,\n            txt\n        }))\n\n// getPropability :: String -> FnStruct -> Number\nconst getPropability = (text, fn) => {\n    const match = getMatch(StemmSnowball, text, fn.sentences.de)[0]\n    return (match && match.value) !== undefined ? match.value : 0\n}\n\n// getMatches :: fn[] -> fn\nconst getMatches = functions => line =>\n    // {\n    // const matchTable = functions\n    functions\n        .reduce(\n            (ret, fn) =>\n                ret.concat([\n                    {\n                        propability: getPropability(line, fn),\n                        // fn: fn.fn,\n                        sentences: fn.sentences,\n                        path: fn.path\n                    }\n                ]),\n            []\n        )\n        .filter(fn => fn.propability > 0)\n        .sort((a, b) => b.propability - a.propability)\n\n// if (matchTable.length > 0) {\n//     const fn = matchTable[0]\n//     return fn\n// } else {\n//     return\n// }\n// }\n\n//\n// const toPathRequest = functions => request => {}\n\n// default :: Path => NlpRequest => Request\nmodule.exports = ({ path }) => {\n    // Load nlp functions\n    State.functions = getNlpFunctions(path)\n    const getMatch = getMatches(State.functions)\n    return reqRes => {\n        console.log('[Middleware] [NLP] path:', path)\n        console.log('[Middleware] [NLP] ReqRes:', reqRes)\n\n        if (!reqRes.case) {\n            return reqRes\n        }\n\n        return reqRes.case({\n            Request: () => {\n                console.log('[Middleware] [NLP] Request:', Request)\n                // 1. Request with nlp body\n                const sentence = reqRes.payload.sentence\n                if (sentence) {\n                    const matchTable = getMatch(String(sentence))\n                    if (matchTable.length > 0) {\n                        const match = matchTable[0]\n                        return Request.NLP(match.path, sentence)\n                    }\n                }\n                // 2. NLP Request\n                return reqRes\n            },\n            Response: () => reqRes\n        })\n\n        // const fn = findMatch(functions)\n        // if (fn) {\n        //     return fn(req.data)\n        // }\n        // return {\n        //     ok: false,\n        //     payload: {\n        //         error: 'nlp',\n        //         data: request\n        //     }\n        // }\n    }\n}\n\n//\n// -- Cmdline interface\n//\n//\n// const Readline = require('readline')\n// const input = Readline.createInterface(process.stdin, process.stdout)\n//\n// console.log('Loading..')\n// State.functions = getNlpFunctions('../../modules/functions')\n//\n// console.log('Test against:\\n')\n// State.functions\n//     // print sentences\n//     .map(f => f.sentences)\n//     .map(trace('Function:\\n'))\n//\n// input.setPrompt('\\n\\n> ')\n// input.prompt()\n// input\n//     .on('line', line => {\n//         if (line == 'exit') {\n//             input.close()\n//         }\n//         console.log('')\n//\n//         const stemmer = [/*StemmPorter2,*/ StemmSnowball, Normalize]\n//         const matchTable = State.functions\n//             .reduce(\n//                 (ret, fn) =>\n//                     ret.concat([\n//                         {\n//                             propability: getPropability(line, fn),\n//                             fn: fn.fn,\n//                             sentences: fn.sentences\n//                         }\n//                     ]),\n//                 []\n//             )\n//             .filter(fn => fn.propability > 0)\n//             .sort((a, b) => b.propability - a.propability)\n//         console.log('MatchTable:\\n', matchTable)\n//\n//         if (matchTable.length > 0) {\n//             const fn = matchTable[0]\n//             fn.fn(line)\n//         } else {\n//             console.log('No Match!')\n//         }\n//         input.prompt()\n//     })\n//     .on('close', () => {\n//         process.exit(0)\n//     })\n//\n","// TODO: Modify node search path for modules\n// See:\n// https://gist.github.com/branneman/8048520\nglobal.include = path => require(`${__dirname}/${path}`)\n\n//\n// -- Imports --\n//\nconst App = require('./data/app')\nconst Response = require('./data/response')\nconst HTTPGateway = require('./gateways/http')\nconst TelegramGateway = require('./gateways/telegram')\nconst NLPMiddleware = require('./middleware/nlp')\nconst Path = require('path')\n\n//\n// -- Config --\n//\nconst path = Path.resolve(process.cwd()) + '/functions'\nconst port = 3000\n\n//\n// -- Logic --\n//\nconst loadFunction = (req, basePath) => {\n    const fn = path => require(`${basePath}${path}`)\n    return fn(req.path)(req.payload)\n}\n\nconst Router = ({ path }) => request => {\n    try {\n        console.log('Load Function: Path: ', path)\n        console.log('Load Function: Request: ', request)\n        return loadFunction(request, path)\n    } catch (e) {\n        console.log('Load Function: Error: ', e)\n        return Response.Error(e)\n    }\n}\n\nconst Service = App()\n    // Add data sources\n    .source(HTTPGateway({ port }))\n    // Add data manipulation pipeline steps\n    .add(NLPMiddleware({ path }))\n    // Add data processing\n    .do(Router({ path }))\n\n//\n// -- Exports --\n//\nmodule.exports = {\n    Service,\n    App,\n    Router,\n    HTTPGateway,\n    TelegramGateway,\n    NLPMiddleware\n}\n"]}