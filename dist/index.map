{"version":3,"sources":["middleware.js","gateways/http/index.js","router.js","middleware/nlp.js","index.js"],"names":["gateways","Middleware","g","x","add","f","push","use","run","flow","req","map","gateway","cfg","fn","WebService","program","request","console","log","Request","http","path","data","Fn","fnpath","require","payload","Snowball","Natural","NlpToolkit","StopwordsIso","Fs","default","Language","de","en","State","lang","functions","trace","msg","a","getSubDirs","dir","readdirSync","file","filter","statSync","isDirectory","reduce","ret","d","concat","getNlpFunctions","sentences","replace","e","cleanStopwords","text","split","w","includes","join","trim","StemmSnowball","length","stemmer","cleanedText","toLowerCase","setCurrent","stem","getCurrent","Normalize","token","tokenizer","stemmed","calcSimilarity","withStr","matchStr","s1","s2","value","JaroWinklerDistance","getMatch","s","sort","val_a","s_a","val_b","s_b","val","sentence","txt","getPropability","match","undefined","getMatches","line","propability","b","reqRes","case","matchTable","String","NLP","Response","global","include","__dirname","App","ok"],"mappings":"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","file":"index.map","sourceRoot":"../src","sourcesContent":["/*\n    Middleware.js\n\n    Provides a data structure to implement a middleware.\n*/\n\n// A list of gateways, that renerate requests and handle responses.\nconst gateways = []\n\n// The app logic\nconst Middleware = (g = x => x) => ({\n    //\n    add: f => {\n        gateways.push(f)\n        return Middleware(g)\n    },\n\n    use: f => Middleware(x => f(g(x))),\n    run: f => {\n        // Specify how the request flows through the system.\n        //\n        // g()  The registered middlewares for processing resquest and\n        //      response.\n        //\n        // f()  The function to transform a request to a response.\n        //\n        // So g(f(g(req))) means:\n        //\n        // 1. Take the request and let the middlewares process it\n        // 2. Transform the request to a response\n        // 3. Let the middlewares process the response\n\n        const flow = req => g(f(g(req)))\n        // const flow = pipe(\n        //     g,\n        //     f,\n        //     g\n        // )\n\n        // Hand the program flow to the registered gateways,\n        // so that every gateway can pass new (received) requests\n        // to the app flow.\n        gateways.map(gateway => gateway(flow))\n    }\n})\n\nexport default Middleware\n","/*\n    HttpListener\n\n    Listen to http events and forward them back to the app for handling.\n*/\n\nimport WebService from './web-service'\nimport Request from '../../data/request'\n// const Request = include('data/request')\n\n// Get http requests, send them to the system for processing and\n// send the response after successfull handling.\nexport default cfg => fn =>\n    WebService.program(request => {\n        console.log('Http:', request)\n        const req = Request.Request(request.http.path, request.data)\n        console.log('Request:', req)\n        return fn(req)\n    })\n","// import Fn from '../data/endpoint'\n\nconst Fn = (fnpath, req) => {\n    const fn = path => require(`${fnpath}${path}`)\n    return fn(req.path)(req.payload)\n}\n\nexport default (fnpath, request) => {\n    return Fn(fnpath, request)\n}\n","/*\n    Route sentences to modules using nlp technics.\n*/\n\n// const Franc = require('franc') // Language detection\n// const Tokenizer = require('./stem/tokenizer')\nconst Snowball = require('snowball')\nconst Natural = require('natural') // sentence similarity\nconst NlpToolkit = require('nlp-toolkit')\nconst StopwordsIso = require('stopwords-iso')\nconst Fs = require('fs')\n\nconst Request = require('../data/request').default\n\n// Languages :: Languages\nconst Language = {\n    de: 'German',\n    en: 'English'\n}\n\n// State :: State\nconst State = {\n    lang: 'de',\n    functions: []\n}\n\n//\n// -- Utils\n//\n\n// trace :: String => a => a\nconst trace = msg => a => {\n    console.log(msg, a)\n    return a\n}\n\n// getSubDirs :: String => String[]\nconst getSubDirs = dir =>\n    Fs.readdirSync(dir)\n        // Convert the filename to a full path, filter out all\n        // directories and look recursively for more nested dirs.\n        .map(file => `${dir}/${file}`)\n        .filter(file => Fs.statSync(file).isDirectory())\n        .reduce(\n            (ret, d) =>\n                ret\n                    // Add found dirs to return value and look for\n                    // more nested dirs.\n                    .concat(d)\n                    .concat(getSubDirs(d)),\n            []\n        )\n\n// getNlpFunctions :: String => NlpFunction[]\nconst getNlpFunctions = dir =>\n    getSubDirs(dir).reduce((ret, path) => {\n        try {\n            const cfg = require(`${path}/function.json`)\n            // const fn = require(`${path}/index.js`)\n            if (cfg.sentences.de || cfg.sentences.en) {\n                // ret.push({ fn, sentences: cfg.sentences })\n                ret.push({\n                    path: path.replace(dir, ''),\n                    sentences: cfg.sentences\n                })\n            }\n        } catch (e) {\n            // Not found, or something else..\n            // console.error('NLPFunction:', e)\n        }\n        return ret\n    }, [])\n\n// cleanStopwords :: String => Language => String\nconst cleanStopwords = (text, lang) =>\n    text\n        // split sentence to an array of words\n        .split(' ')\n        // Filter all stopwords\n        .filter(w => !StopwordsIso[lang].includes(w))\n        // create string again\n        .join(' ')\n        .trim()\n\n// StemmSnowball :: String -> String\nconst StemmSnowball = text => {\n    if (text.length > 5) {\n        const stemmer = new Snowball(Language[State.lang])\n        const cleanedText = cleanStopwords(\n            text.toLowerCase().trim(),\n            State.lang\n        )\n        stemmer.setCurrent(cleanedText)\n        stemmer.stem()\n        return stemmer.getCurrent()\n    } else {\n        return text.toLowerCase()\n    }\n}\n\n// Normalize :: String -> String\nconst Normalize = text => {\n    const token = NlpToolkit.tokenizer(text)\n    const stemmed = NlpToolkit.stemmer(token, { lang: State.lang })\n    return cleanStopwords(stemmed.join(' ').trim(), State.lang)\n}\n\n// Normalize :: (String => String) -> String -> String -> { val: Number, msg: String }\nconst calcSimilarity = (stemmer, withStr, matchStr) => {\n    const s1 = stemmer(matchStr.toLowerCase().trim())\n    const s2 = stemmer(withStr.toLowerCase().trim())\n    const value = Natural.JaroWinklerDistance(s1, s2)\n\n    return [value, s1]\n}\n\nconst getMatch = (stemmer, text, sentences) =>\n    sentences\n        .map(s => calcSimilarity(stemmer, text, s))\n        .sort(([val_a, s_a], [val_b, s_b]) => val_b - val_a)\n        // .map(trace('#'))\n        .filter(([val, sentence]) => val >= 0.75)\n        .map(([value, txt]) => ({\n            value,\n            txt\n        }))\n\n// getPropability :: String -> FnStruct -> Number\nconst getPropability = (text, fn) => {\n    const match = getMatch(StemmSnowball, text, fn.sentences.de)[0]\n    return (match && match.value) !== undefined ? match.value : 0\n}\n\n// getMatches :: fn[] -> fn\nconst getMatches = functions => line =>\n    // {\n    // const matchTable = functions\n    functions\n        .reduce(\n            (ret, fn) =>\n                ret.concat([\n                    {\n                        propability: getPropability(line, fn),\n                        // fn: fn.fn,\n                        sentences: fn.sentences,\n                        path: fn.path\n                    }\n                ]),\n            []\n        )\n        .filter(fn => fn.propability > 0)\n        .sort((a, b) => b.propability - a.propability)\n\n// if (matchTable.length > 0) {\n//     const fn = matchTable[0]\n//     return fn\n// } else {\n//     return\n// }\n// }\n\n//\n// const toPathRequest = functions => request => {}\n\n// default :: Path => NlpRequest => Request\nexport default path => {\n    // Load nlp functions\n    State.functions = getNlpFunctions(path)\n    const getMatch = getMatches(State.functions)\n    return reqRes => {\n        console.log('[Middleware] [NLP] path:', path)\n        console.log('[Middleware] [NLP] ReqRes:', reqRes)\n\n        if (!reqRes.case) {\n            return reqRes\n        }\n\n        return reqRes.case({\n            Request: () => {\n                console.log('[Middleware] [NLP] Request:', Request)\n                // 1. Request with nlp body\n                const sentence = reqRes.payload.sentence\n                if (sentence) {\n                    const matchTable = getMatch(String(sentence))\n                    if (matchTable.length > 0) {\n                        const match = matchTable[0]\n                        return Request.NLP(match.path, sentence)\n                    }\n                }\n                // 2. NLP Request\n                return reqRes\n            },\n            Response: () => reqRes\n        })\n\n        // const fn = findMatch(functions)\n        // if (fn) {\n        //     return fn(req.data)\n        // }\n        // return {\n        //     ok: false,\n        //     payload: {\n        //         error: 'nlp',\n        //         data: request\n        //     }\n        // }\n    }\n}\n\n//\n// -- Cmdline interface\n//\n//\n// const Readline = require('readline')\n// const input = Readline.createInterface(process.stdin, process.stdout)\n//\n// console.log('Loading..')\n// State.functions = getNlpFunctions('../../modules/functions')\n//\n// console.log('Test against:\\n')\n// State.functions\n//     // print sentences\n//     .map(f => f.sentences)\n//     .map(trace('Function:\\n'))\n//\n// input.setPrompt('\\n\\n> ')\n// input.prompt()\n// input\n//     .on('line', line => {\n//         if (line == 'exit') {\n//             input.close()\n//         }\n//         console.log('')\n//\n//         const stemmer = [/*StemmPorter2,*/ StemmSnowball, Normalize]\n//         const matchTable = State.functions\n//             .reduce(\n//                 (ret, fn) =>\n//                     ret.concat([\n//                         {\n//                             propability: getPropability(line, fn),\n//                             fn: fn.fn,\n//                             sentences: fn.sentences\n//                         }\n//                     ]),\n//                 []\n//             )\n//             .filter(fn => fn.propability > 0)\n//             .sort((a, b) => b.propability - a.propability)\n//         console.log('MatchTable:\\n', matchTable)\n//\n//         if (matchTable.length > 0) {\n//             const fn = matchTable[0]\n//             fn.fn(line)\n//         } else {\n//             console.log('No Match!')\n//         }\n//         input.prompt()\n//     })\n//     .on('close', () => {\n//         process.exit(0)\n//     })\n//\n","// TODO: Modify node search path for modules\n// See:\n// https://gist.github.com/branneman/8048520\nglobal.include = path => require(`${__dirname}/${path}`)\n\n// Import the app structure\nimport Middleware from './middleware'\nimport HttpGateway from './gateways/http'\nimport Router from './router'\nimport NlpLayer from './middleware/nlp'\n\n// import Request from './data/request'\n\nconst path = `${__dirname}/../modules/functions`\n// const nlpRouter = NlpRouter(path)\n\nconst App = Middleware()\nApp\n    // Define how we receive and send data\n    .add(HttpGateway())\n    // .add(NatsGateway())\n    // .add(TelegramGateway())\n\n    // Define how we process the incoming data\n    .use(NlpLayer(path))\n    // .use(BeuthAuthentication)\n\n    // Decide to which function we want to route the request to\n    .run(request => {\n        // Get path for nlp Requests.\n        console.log('[Gateway] Request: ', request)\n        try {\n            return Router(path, request)\n        } catch (e) {\n            return {\n                ok: false,\n                payload: e\n            }\n        }\n        // return request.case({\n        //     Path: () => Router(path, request),\n        //     NLP: () => nlpRouter(request)\n        // })\n    })\n"]}