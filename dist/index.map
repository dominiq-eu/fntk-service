{"version":3,"sources":["data/app.js","data/request.js","data/response.js","gateways/http/web-service.js","gateways/http/index.js","gateways/telegram/index.js","middleware/nlp.js","index.js"],"names":["Let","require","App","fn","x","sources","layer","add","s","concat","use","l","do","f","start","dataPipeline","reduce","g","In","forEach","module","exports","Type","Data","StringType","RequestType","path","String","payload","Object","NLP","v","is","sentence","val","Union","Result","Random","RandomOkType","Ok","derive","val_list","Response","Success","Error","Err","console","log","case","Express","Compression","BodyParser","Url","Http","Log","HttpHeader","method","url","headers","HttpRequest","http","data","isObject","obj","toPromise","p","then","Promise","resolve","toString","response","JSON","stringify","isObjEmpty","Boolean","keys","length","app","json","urlencoded","extended","all","req","res","next","parse","debug","request","pathname","query","body","handler","r","write","end","program","port","prog","createServer","listen","WebService","Request","cfg","TeleBot","Pipe","ParseMode","Text","of","Markdown","HTML","TelegramGateway","token","parseMode","check","bot","polling","interval","on","msg","text","andThen","value","error","answer","sendMessage","from","id","replyToMessage","message_id","catch","e","Snowball","Natural","NlpToolkit","StopwordsIso","Fs","Language","de","en","State","lang","functions","getSubDirs","dir","readdirSync","map","file","filter","statSync","isDirectory","ret","d","getNlpFunctions","sentences","replace","cleanStopwords","split","w","includes","join","trim","StemmSnowball","stemmer","cleanedText","toLowerCase","setCurrent","stem","getCurrent","Normalize","tokenizer","stemmed","calcSimilarity","withStr","matchStr","s1","s2","JaroWinklerDistance","getMatch","sort","val_a","s_a","val_b","s_b","txt","getPropability","match","undefined","getMatches","line","propability","a","b","findModule","matchTable","fnPath","newRequest","HTTPGateway","NLPMiddleware","Path","process","cwd","loadFunction","Router","Service"],"mappings":"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","file":"index.map","sourceRoot":"../src","sourcesContent":["/*\n    App.js\n\n    Provides a data structure for basic app behaivor.\n*/\n\nconst { Let } = require('@fntk/utils')\n\n//\n// App\n//  * fn: The app logic\n//  * sources: A list of functions that act as data sources and generate data\n//  * layer: A list of functions that builds a pipeline and manipulate the\n//           data before reaching the app logic (fn)\n//\n// App :: Function -> List(Function) -> List(Function) -> Nothing\nconst App = (fn = x => x, sources = [], layer = []) => ({\n    // Here we add data sources. They can create data and feed in\n    // the system.\n    add: s => App(fn, sources.concat([s]), layer),\n\n    // Here we add a middleware layer to manipulate the data on his way\n    // trough the system, before it reaches it's final processing.\n    use: l => App(fn, sources, layer.concat([l])),\n\n    // Add the data processing. This is the main logic of the app.\n    do: f => App(f, sources, layer),\n\n    // Start the app\n    start: () =>\n        Let({\n            // Build the data pipeline. Incoming data is passed to all\n            // layers of middleware in the order we defined it earlier\n            // trough the .use() function.\n            dataPipeline: layer\n                // Add the program logic as last step, after the\n                // middleware layer\n                .concat(fn)\n                // Build the pipeline using composition\n                .reduce((f, g) => x => g(f(x)), x => x)\n        }).In(({ dataPipeline }) =>\n            // Hand the data processing pipeline to the data sources,\n            // so that every source can pass new data to the app.\n            sources.forEach(s => s(dataPipeline))\n        )\n})\n\nmodule.exports = App\n","/*\n    Request\n\n    Provides a data structure that represents an incoming request.\n*/\n\nconst { Type, Data, StringType } = require('@fntk/types')\n\nconst RequestType = Data('Request', {\n    path: String,\n    payload: Object\n})\n\nRequestType.NLP = Type(\n    'NLP',\n    v => RequestType.is(v) && StringType.is(v.payload.sentence),\n    val => ({\n        path: '/',\n        payload: { sentence: StringType(val) }\n    })\n)\n\n// RequestType.NLP = RequestType.derive(val => ({\n//     path: '/',\n//     payload: { sentence: StringType(val) }\n// }))\n\n// const Request = Union('Request', {\n//     Request: RequestType,\n//     NLP: NLPRequestType\n// })\n\nmodule.exports = RequestType\n","/*\n    Request\n\n    Provides a data structure that represents an incoming request.\n*/\n\nconst { Union, Result } = require('@fntk/types')\nconst { Random } = require('@fntk/utils')\n\nconst RandomOkType = Result.Ok.derive(val_list => Random(val_list))\n\nconst Response = Union('Response', {\n    Success: Result.Ok,\n    Error: Result.Err,\n    Random: RandomOkType\n})\n\nconsole.log('Response:', Response)\nconsole.log('case:', Response.case)\n\nmodule.exports = Response\n","// Express\nconst Express = require('express')\nconst Compression = require('compression')\nconst BodyParser = require('body-parser')\n\n// Node\nconst Url = require('url')\nconst Http = require('http')\n\nconst { Data } = require('@fntk/types')\nconst { Log } = require('@fntk/utils')\n\nconst log = Log('WebService')\n\n//\n// -- Types\n//\n\nconst HttpHeader = Data('HTTPHeader', {\n    method: String,\n    url: String,\n    path: String,\n    headers: Object\n})\n\nconst HttpRequest = Data('HTTPRequest', {\n    http: HttpHeader,\n    data: Object\n})\n\n//\n// -- Helper\n//\nconst isObject = obj => obj !== null && typeof obj === 'object'\nconst toPromise = p => (p.then ? p : Promise.resolve(p))\nconst toString = response =>\n    isObject(response) ? JSON.stringify(response, 0, 4) : response\nconst isObjEmpty = obj => Boolean(Object.keys(obj).length)\n\n// app :: ()\nconst app = fn =>\n    Express()\n        .use(Compression()) // Compression support\n        .use(BodyParser.json()) // Automatic parsing of the response body\n        .use(BodyParser.urlencoded({ extended: true }))\n        // Catch route\n        .all('*', (req, res, next) => {\n            const url = Url.parse(req.url, true)\n            log.debug('URL', url)\n            const request = HttpRequest({\n                http: HttpHeader({\n                    method: req.method,\n                    headers: req.headers,\n                    url: req.url,\n                    path: url.pathname\n                }),\n                data: isObjEmpty(url.query) ? url.query : req.body\n            })\n            log.debug('Request', request)\n            const handler = r => toPromise(fn(r))\n            return handler(request)\n                .then(toString)\n                .then(response => {\n                    log.debug('[WebService] Response: ', response)\n                    res.write(response)\n                    return res.end()\n                })\n        })\n\n// program :: { Int, [ Route ]}\nconst program = fn => {\n    // Configuration\n    const port = 8000\n    const prog = app(fn)\n\n    Http.createServer(prog).listen(port, () =>\n        log.debug(`Listening on: 0.0.0.0:${port}`)\n    )\n    return port\n}\n\nmodule.exports = { program }\n","/*\n    HttpListener\n\n    Listen to http events and forward them back to the app for handling.\n*/\n\nconst WebService = require('./web-service')\nconst Request = require('../../data/request')\nconst { Log } = require('@fntk/utils')\n\nconst log = Log('HTTPGateway')\n\n// Get http requests, send them to the system for processing and\n// send the response after successfull handling.\nmodule.exports = cfg => fn =>\n    WebService.program(request => {\n        log.debug('HTTPRequest', request)\n        const req = Request({\n            path: request.http.path,\n            payload: request.data\n        })\n        log.debug('Request', req)\n        return fn(req)\n    })\n","/*\n    telegram.js\n\n    Get updates from telegram.\n*/\n\nconst Request = require('../../data/request')\nconst Response = require('../../data/response')\nconst TeleBot = require('telebot')\nconst { Union, StringType } = require('@fntk/types')\nconst { Log, Pipe } = require('@fntk/utils')\n\nconst log = Log('TelegramGateway')\n\n//\n// -- Helper --\n//\nconst toPromise = p => (p.then ? p : Promise.resolve(p))\n\n//\n// -- Types --\n//\n\nconst ParseMode = Union('TelegramParseMode', {\n    Text: StringType.of('Text'),\n    Markdown: StringType.of('Markdown'),\n    HTML: StringType.of('HTML')\n})\n\n// On token:\n// https://core.telegram.org/bots/api#authorizing-your-bot\n//\n// On parseMode:\n// https://core.telegram.org/bots/api#formatting-options\n//\nconst TelegramGateway = function({ token, parseMode = ParseMode.Text() }) {\n    log.debug('parseMode', parseMode)\n    ParseMode.check(parseMode)\n    log.debug('ParseMode', parseMode)\n    return fn => {\n        const bot = new TeleBot({\n            token,\n            polling: {\n                interval: 1000\n            }\n        })\n\n        // eslint-disable-next-line fp/no-unused-expression\n        bot.on('text', msg =>\n            // Create NLP Request and send it to the system to\n            // produce a response.\n            Pipe(Request.NLP(msg.text))\n                .andThen(req => toPromise(fn(req)))\n                // Get Response from the system guaranteed as Promise<Response>\n                .value()\n                // .. and handle it.\n                .then(log.debug('Response'))\n                .then(response =>\n                    Response.case(response, {\n                        Success: () => response.value,\n                        Error: () => response.error\n                    })\n                )\n                .then(log.debug('Answer'))\n                .then(answer =>\n                    bot.sendMessage(msg.from.id, answer, {\n                        parseMode,\n                        replyToMessage: msg.message_id\n                    })\n                )\n                .catch(log.error('Error'))\n                .catch(e =>\n                    bot.sendMessage(msg.from.id, 'Internal Error', {\n                        replyToMessage: msg.message_id\n                    })\n                )\n        )\n        return bot.start()\n    }\n}\nTelegramGateway.ParseMode = ParseMode\n\nmodule.exports = TelegramGateway\n","/*\n    Route sentences to modules using nlp technics.\n*/\n\n// const Franc = require('franc') // Language detection\n// const Tokenizer = require('./stem/tokenizer')\nconst Snowball = require('snowball')\nconst Natural = require('natural') // sentence similarity\nconst NlpToolkit = require('nlp-toolkit')\nconst StopwordsIso = require('stopwords-iso')\nconst Fs = require('fs')\n\n// const GerSnowball = require('./snowball-ger')\n\nconst Request = require('../data/request')\nconst Response = require('../data/response')\nconst { Log } = require('@fntk/utils')\n\nconst log = Log('NLPMiddleware')\n\n// Languages :: Languages\nconst Language = {\n    de: 'German',\n    en: 'English'\n}\n\n// State :: State\nconst State = {\n    lang: 'de',\n    functions: []\n}\n\n//\n// -- Utils\n//\n\n// getSubDirs :: String => String[]\nconst getSubDirs = dir =>\n    Fs.readdirSync(dir)\n        // Convert the filename to a full path, filter out all\n        // directories and look recursively for more nested dirs.\n        .map(file => `${dir}/${file}`)\n        .filter(file => Fs.statSync(file).isDirectory())\n        .reduce(\n            (ret, d) =>\n                ret\n                    // Add found dirs to return value and look for\n                    // more nested dirs.\n                    .concat(d)\n                    .concat(getSubDirs(d)),\n            []\n        )\n\n// getNlpFunctions :: String => NlpFunction[]\nconst getNlpFunctions = dir =>\n    getSubDirs(dir).reduce((ret, path) => {\n        try {\n            const cfg = require(`${path}/function.json`)\n            if (cfg.sentences.de || cfg.sentences.en) {\n                return ret.concat([\n                    {\n                        path: path.replace(dir, ''),\n                        sentences: cfg.sentences\n                    }\n                ])\n            }\n        } catch (e) {\n            // Not found, or something else..\n            // console.error('NLPFunction:', e)\n        }\n        return ret\n    }, [])\n\n// cleanStopwords :: String => Language => String\nconst cleanStopwords = (text, lang) =>\n    text\n        // split sentence to an array of words\n        .split(' ')\n        // Filter all stopwords\n        .filter(w => !StopwordsIso[lang].includes(w))\n        // create string again\n        .join(' ')\n        .trim()\n\n// StemmSnowball :: String -> String\nconst StemmSnowball = text => {\n    if (text.length > 5) {\n        const stemmer = new Snowball(Language[State.lang])\n        const cleanedText = cleanStopwords(\n            text.toLowerCase().trim(),\n            State.lang\n        )\n        stemmer.setCurrent(cleanedText)\n        stemmer.stem()\n        return stemmer.getCurrent()\n    }\n    return text.toLowerCase()\n}\n\n// const GerStemmer = text => {\n//     const cleanedText = cleanStopwords(text.toLowerCase().trim(), State.lang)\n//     return GerSnowball(cleanedText)\n// }\n\n// Normalize :: String -> String\nconst Normalize = text => {\n    const token = NlpToolkit.tokenizer(text)\n    const stemmed = NlpToolkit.stemmer(token, { lang: State.lang })\n    return cleanStopwords(stemmed.join(' ').trim(), State.lang)\n}\n\n// Normalize :: (String => String) -> String -> String -> { val: Number, msg: String }\nconst calcSimilarity = (stemmer, withStr, matchStr) => {\n    const s1 = stemmer(matchStr.toLowerCase().trim())\n    const s2 = stemmer(withStr.toLowerCase().trim())\n    const value = Natural.JaroWinklerDistance(s1, s2)\n\n    return [value, s1]\n}\n\nconst getMatch = (stemmer, text, sentences) =>\n    sentences\n        .map(s => calcSimilarity(stemmer, text, s))\n        .sort(([val_a, s_a], [val_b, s_b]) => val_b - val_a)\n        // .map(log.debug('#'))\n        .filter(([val, sentence]) => val >= 0.75)\n        .map(([value, txt]) => ({\n            value,\n            txt\n        }))\n\n// getPropability :: String -> FnStruct -> Number\nconst getPropability = (text, fn) => {\n    // const match = getMatch(GerStemmer, text, fn.sentences.de)[0]\n    const match = getMatch(StemmSnowball, text, fn.sentences.de)[0]\n    return (match && match.value) !== undefined ? match.value : 0\n}\n\n// getMatches :: fn[] -> fn\nconst getMatches = functions => line =>\n    functions\n        .reduce(\n            (ret, fn) =>\n                ret.concat([\n                    {\n                        propability: getPropability(line, fn),\n                        // fn: fn.fn,\n                        sentences: fn.sentences,\n                        path: fn.path\n                    }\n                ]),\n            []\n        )\n        .filter(fn => fn.propability > 0)\n        .sort((a, b) => b.propability - a.propability)\n\n// default :: Path => NlpRequest => Request\nmodule.exports = ({ path }) => {\n    // Load nlp functions\n    log.debug('Path', path)\n    State.functions = getNlpFunctions(path)\n    log.debug('GetNlpFunctions', State.functions)\n    const findModule = getMatches(State.functions)\n    log.debug('getMatch', findModule)\n    return request => {\n        log.debug('request', request)\n        if (Request.NLP.is(request)) {\n            const sentence = request.payload.sentence\n            const matchTable = findModule(sentence)\n            log.debug('MatchTable', matchTable)\n            if (matchTable.length > 0) {\n                const match = matchTable[0]\n                const fnPath = match.path\n                const newRequest = Request({\n                    path: fnPath,\n                    payload: { sentence }\n                })\n                log.debug('NewRequest', newRequest)\n                return newRequest\n            }\n        }\n        return request\n    }\n}\n\n//\n// -- Cmdline interface\n//\n//\n// const Readline = require('readline')\n// const input = Readline.createInterface(process.stdin, process.stdout)\n//\n// log.debug('Loading..')\n// State.functions = getNlpFunctions('../../modules/functions')\n//\n// log.debug('Test against:\\n')\n// State.functions\n//     // print sentences\n//     .map(f => f.sentences)\n//     .map(trace('Function:\\n'))\n//\n// input.setPrompt('\\n\\n> ')\n// input.prompt()\n// input\n//     .on('line', line => {\n//         if (line == 'exit') {\n//             input.close()\n//         }\n//         log.debug('')\n//\n//         const stemmer = [/*StemmPorter2,*/ StemmSnowball, Normalize]\n//         const matchTable = State.functions\n//             .reduce(\n//                 (ret, fn) =>\n//                     ret.concat([\n//                         {\n//                             propability: getPropability(line, fn),\n//                             fn: fn.fn,\n//                             sentences: fn.sentences\n//                         }\n//                     ]),\n//                 []\n//             )\n//             .filter(fn => fn.propability > 0)\n//             .sort((a, b) => b.propability - a.propability)\n//         log.debug('MatchTable:\\n', matchTable)\n//\n//         if (matchTable.length > 0) {\n//             const fn = matchTable[0]\n//             fn.fn(line)\n//         } else {\n//             log.debug('No Match!')\n//         }\n//         input.prompt()\n//     })\n//     .on('close', () => {\n//         process.exit(0)\n//     })\n//\n","// TODO: Modify node search path for modules\n// See:\n// https://gist.github.com/branneman/8048520\n//global.include = path => require(`${__dirname}/${path}`)\n\n//\n// -- Imports --\n//\nconst App = require('./data/app')\nconst Request = require('./data/request')\nconst Response = require('./data/response')\nconst HTTPGateway = require('./gateways/http')\nconst TelegramGateway = require('./gateways/telegram')\nconst NLPMiddleware = require('./middleware/nlp')\nconst Path = require('path')\n\n//\n// -- Config --\n//\nconst path = Path.resolve(process.cwd()) + '/functions'\nconst port = 3000\n\n//\n// -- Logic --\n//\nconst loadFunction = (req, path) => {\n    const fn = require(path)\n    return fn(req.payload)\n}\n\nconst Router = ({ path }) => request => {\n    if (Request.is(request)) {\n        const fnPath = `${path}${request.path}`\n        try {\n            console.log('[Router] Path:', fnPath)\n            console.log('[Router] Request:', request)\n            return loadFunction(request, fnPath)\n        } catch (e) {\n            console.log('Load Function: Error: ', e)\n            return Response.Error(\"Can't find \" + fnPath)\n        }\n    }\n    return Response.Error('Invalid request: ' + request)\n}\n\nconst Service = App()\n    // Add data sources\n    .add(HTTPGateway({ port }))\n    // Add data manipulation pipeline steps\n    .use(NLPMiddleware({ path }))\n    // Add data processing\n    .do(Router({ path }))\n\n//\n// -- Exports --\n//\nmodule.exports = {\n    Service,\n    App,\n    Router,\n    Request,\n    Response,\n    HTTPGateway,\n    TelegramGateway,\n    NLPMiddleware\n}\n"]}